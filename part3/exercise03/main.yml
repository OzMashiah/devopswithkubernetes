name: Release application

on:
  push:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-north1-b
  TODO_IMAGE: todo
  TODO_BACKEND_IMAGE: todo-backend
  POSTGRES_IMAGE: postgres 
  TODO_DEP: todo-dep
  TODO_BACKEND_DEP: todo-backend-dep
  POSTGRES_STSET: postgres-stset
  BRANCH: ${{ github.ref_name }}
  SOPS_AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}

jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sops
        run: |
          set -euo pipefail
          wget https://github.com/getsops/sops/releases/download/v3.8.1/sops_3.8.1_amd64.deb
          echo ' 535bce529e2df7368ffba3fed2b427b9f964318fa28959d913924a70ba01c086  sops_3.8.1_amd64.deb' > sops_3.8.1_amd64.deb.sig
          sha256sum -c sops_3.8.1_amd64.deb.sig
          sudo dpkg -i sops_3.8.1_amd64.deb

      - name: Import age private key
        run: |
          echo "$SOPS_AGE_PRIVATE_KEY" > /tmp/age.key
          export SOPS_AGE_KEY_FILE=/tmp/age.key
          sops -d part3/exercise03/postgres/postgrespass-secret.enc.yml > part3/exercise03/postgres/postgrespass-secret.yml

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Use gcloud CLI'
        run: gcloud info

      - run: gcloud --quiet auth configure-docker

      - name: 'Get GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          project_id: '${{ env.PROJECT_ID }}'
          location: '${{ env.GKE_ZONE }}'

      - name: Build and publish
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$TODO_IMAGE:$BRANCH-$GITHUB_SHA" ./part3/exercise03/todo 
          docker push "gcr.io/$PROJECT_ID/$TODO_IMAGE:$BRANCH-$GITHUB_SHA"

          docker build --tag "gcr.io/$PROJECT_ID/$TODO_BACKEND_IMAGE:$BRANCH-$GITHUB_SHA" ./part3/exercise03/todo-backend
          docker push "gcr.io/$PROJECT_ID/$TODO_BACKEND_IMAGE:$BRANCH-$GITHUB_SHA"
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Deploy
        run: |-
          cd part3/exercise03
          
          if [[ "${GITHUB_REF#refs/heads/}" == "main" ]]; then
            kubectl create namespace default || true
            kubectl config set-context --current --namespace=default
            kustomize edit set namespace default
          else
            kubectl create namespace ${GITHUB_REF#refs/heads/} || true
            kubectl config set-context --current --namespace=${GITHUB_REF#refs/heads/}
            kustomize edit set namespace ${GITHUB_REF#refs/heads/}
          fi
          
          kustomize edit set image PROJECT/TODO_IMAGE=gcr.io/$PROJECT_ID/$TODO_IMAGE:$BRANCH-$GITHUB_SHA
          kustomize edit set image PROJECT/TODO_BACKEND_IMAGE=gcr.io/$PROJECT_ID/$TODO_BACKEND_IMAGE:$BRANCH-$GITHUB_SHA

          kustomize build . | kubectl apply -f -
          kubectl rollout status statefulset $POSTGRES_STSET -n ${GITHUB_REF#refs/heads/}
          kubectl rollout status deployment $TODO_BACKEND_DEP -n ${GITHUB_REF#refs/heads/}
          kubectl rollout status deployment $TODO_DEP -n ${GITHUB_REF#refs/heads/}
          kubectl get services -o wide -n ${GITHUB_REF#refs/heads/}

      - name: Clean up decrypted secrets
        run: rm part3/exercise03/postgres/postgrespass-secret.yml
